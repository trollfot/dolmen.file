===========
dolmen.file
===========

``dolmen.file`` allows you to manage and store files within the ZODB.

Global use
==========

    >>> from dolmen.file import File, IFile, FileChunk

Let's test the constructor::

    >>> file = File()
    >>> file.content_type
    ''
    >>> file.data
    ''

    >>> file = File('Foobar')
    >>> file.content_type
    ''
    >>> file.data
    'Foobar'

    >>> file = File('Foobar', 'text/plain')
    >>> file.content_type
    'text/plain'
    >>> file.data
    'Foobar'

    >>> file = File(data='Foobar', content_type='text/plain')
    >>> file.content_type
    'text/plain'
    >>> file.data
    'Foobar'

Let's test the mutators::

    >>> file = File()
    >>> file.content_type = 'text/plain'
    >>> file.content_type
    'text/plain'

    >>> file.data = 'Foobar'
    >>> file.data
    'Foobar'

    >>> file.data = None
    Traceback (most recent call last):
    ...
    TypeError: Cannot set None data on a file.


Let's test large data input::

    >>> file = File()

    Insert as string:

    >>> file.data = 'Foobar'*60000
    >>> file.size
    360000
    >>> file.data == 'Foobar'*60000
    True

Insert data as FileChunk::

    >>> fc = FileChunk('Foobar'*4000)
    >>> file.data = fc
    >>> file.size
    24000
    >>> file.data == 'Foobar'*4000
    True

Insert data from file object::

    >>> import cStringIO
    >>> sio = cStringIO.StringIO()
    >>> sio.write('Foobar'*100000)
    >>> sio.seek(0)
    >>> file.data = sio
    >>> file.size
    600000
    >>> file.data == 'Foobar'*100000
    True

Last, but not least, verify the interface implementation::

    >>> from zope.interface.verify import verifyClass
    >>> IFile.implementedBy(File)
    True
    >>> verifyClass(IFile, File)
    True


Naming
======

When no name is provided, the fallback is a simple empty unicode
string::

    >>> file = File('Foobar')
    >>> file.content_type
    ''
    >>> file.data
    'Foobar'
    >>> file.filename
    u''

To specifiy a filename, we can give it to the constructor::
    
    >>> file = File('Foobar', filename='foobar.txt')
    >>> file.data
    'Foobar'
    >>> file.filename
    u'foobar.txt'

The filename can be both unicode or simple string::

    >>> file = File('Foobar', filename=u'foobar.txt')
    >>> file.data
    'Foobar'
    >>> file.filename
    u'foobar.txt'

The filename provided had an extension : 'txt'. This extension is used
by the File, while instanciated, to try and guess the mimetype of
the data::

    >>> file.content_type
    'text/plain'

    The filename can be set later, but this won't trigger the mime
    type guess::
    
    >>> file.filename = u"something.zip"
    >>> file.filename
    u'something.zip'
    >>> file.content_type
    'text/plain'


Size
====

To represent the size of the stored data, ``dolmen.file`` uses a
normalization adapter, based on the ``zope.size`` definitions::

  >>> from dolmen.file import Sized
  >>> sized = Sized(file)
  >>> sized
  <cromlech.file.size.Sized object at ...>
  >>> sized.sizeForSorting()
  ('byte', 6)
  >>> sized.sizeForDisplay()
  u'1 KB'


Field, download and security
============================

In a site, the file object is rarely accessed directly. Often, it's
just a part of a more complex object. For that matter, we have three
dedicated components: the field, the property and the traverser.


Field and Property
------------------

A property is provided to allow a transparent use of a IFile component.

Working exemple
~~~~~~~~~~~~~~~

    >>> from persistent import Persistent
    >>> from cromlech.file import FileProperty, FileField
    >>> from dolmen.file import File
    >>> from zope.interface import Interface, implements

    >>> class IContent(Interface):
    ...     binary = FileField(title=u"Binary data")

    >>> class MyContent(Persistent):
    ...     implements(IContent)
    ...     binary = FileProperty(IContent['binary'], File)

    >>> manfred = MyContent()
    >>> manfred.binary = FileChunk('Foobar')
    >>> manfred.binary
    <dolmen.file.file.File object at ...>

    >>> manfred.binary.data
    'Foobar'
